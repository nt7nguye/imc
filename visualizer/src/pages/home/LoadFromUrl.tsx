import { Button, Code, Text, TextInput } from '@mantine/core';
import axios from 'axios';
import { FormEvent, ReactNode, useCallback, useEffect, useState } from 'react';
import { useNavigate, useSearchParams } from 'react-router-dom';
import { ErrorAlert } from '../../components/ErrorAlert.tsx';
import { useAsync } from '../../hooks/use-async.ts';
import { useStore } from '../../store.ts';
import { parseAlgorithmLogs } from '../../utils/algorithm.tsx';
import { HomeCard } from './HomeCard.tsx';

export function LoadFromUrl(): ReactNode {
  const [url, setUrl] = useState('');

  const algorithm = useStore(state => state.algorithm);
  const setAlgorithm = useStore(state => state.setAlgorithm);

  const navigate = useNavigate();
  const searchParams = useSearchParams()[0];

  const loadAlgorithm = useAsync(async (logsUrl: string): Promise<void> => {
    const logsResponse = await axios.get(logsUrl);
    setAlgorithm(parseAlgorithmLogs(logsResponse.data));
    navigate(`/visualizer?open=${logsUrl}`);
  });

  const onSubmit = useCallback(
    (event?: FormEvent<HTMLFormElement>) => {
      event?.preventDefault();

      if (url.trim().length > 0) {
        loadAlgorithm.call(url);
      }
    },
    [loadAlgorithm],
  );

  useEffect(() => {
    if (algorithm !== null || loadAlgorithm.loading) {
      return;
    }

    if (!searchParams.has('open')) {
      return;
    }

    const url = searchParams.get('open') || '';

    setUrl(url);

    if (url.trim().length > 0) {
      loadAlgorithm.call(url);
    }
  }, []);

  const currentUrl = window.location.origin + window.location.pathname;

  return (
    <HomeCard title="Load from URL">
      <Text>
        Supports URLs to log files that are in the same format as the ones generated by the Prosperity servers. This
        format is undocumented, but you can get an idea of what it looks like by downloading a log file from a submitted
        algorithm. The URL must allow cross-origin requests from the visualizer&apos;s website.
      </Text>
      <Text>
        This input type can also be used by browsing to <Code>{currentUrl}?open=&lt;url&gt;</Code>.
      </Text>

      {loadAlgorithm.error && <ErrorAlert error={loadAlgorithm.error} />}

      <form onSubmit={onSubmit}>
        <TextInput
          label="URL"
          placeholder="URL"
          value={url}
          onInput={e => setUrl((e.target as HTMLInputElement).value)}
        />

        <Button fullWidth type="submit" loading={loadAlgorithm.loading} mt="sm">
          <div>Load</div>
        </Button>
      </form>
    </HomeCard>
  );
}
